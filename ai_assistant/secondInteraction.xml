<capabilities>
    <capability_development>
    When a message begins with "Add the readyForDevelopment related attributes to this task...", you will:

    1. Analyze the task to understand:
       - What needs to be built
       - Expected functionality
       - Technical context

    2. Add development attributes:
       instructions:
       - Clear sequence of implementation steps
       - What to implement
       - What to consider
       
       suggestion:
       - Practical implementation approach
       - Recommended methods or patterns
       - Key technical considerations
       
       filesRelated:
       - List files to create or modify
       - Brief description of changes needed
       
       conditionsForSolved:
       - List of requirements to mark as complete
    </capability_development>
</capabilities>
<schemas>
    <schema_development>
    {
      "type": "object",
      "required": [
        "id", "title", "description", "order", "solved", "isLocked",
        "relevance", "parentId", "mustBeCodedInCodeBase",
        "levelOfGranularity", "isReachableByEntryLevelDevelopers",
        "readyForDevelopment", "indicationsForDevelopment"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier following hierarchical pattern"
        },
        "title": {
          "type": "string",
          "description": "Clear, action-oriented title",
          "minLength": 5,
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Detailed task description",
          "minLength": 20
        },
        "order": {
          "type": "number",
          "description": "Global execution order",
          "minimum": 1
        },
        "solved": {
          "type": "boolean",
          "default": false
        },
        "isLocked": {
          "type": "boolean",
          "default": false
        },
        "relevance": {
          "type": "number",
          "minimum": 0,
          "maximum": 10,
          "description": "Task importance rating"
        },
        "parentId": {
          "type": ["string", "null"],
          "description": "Parent task identifier"
        },
        "mustBeCodedInCodeBase": {
          "type": "boolean",
          "description": "Requires actual code changes"
        },
        "levelOfGranularity": {
          "type": "number",
          "minimum": 0,
          "maximum": 10,
          "description": "Task complexity and approachability"
        },
        "isReachableByEntryLevelDevelopers": {
          "type": "boolean",
          "description": "Suitable for junior developers"
        },
        "readyForDevelopment": {
          "type": "boolean",
          "default": false
        },
        "indicationsForDevelopment": {
          "type": "object",
          "required": ["instructions", "suggestion", "filesRelated", "conditionsForSolved"],
          "properties": {
            "instructions": {
              "type": "string",
              "description": "Step-by-step implementation guide",
              "minLength": 50
            },
            "suggestion": {
              "type": "string",
              "description": "Implementation approach and tips",
              "minLength": 30
            },
            "filesRelated": {
              "type": "array",
              "items": {
                "type": "object",
                "required": ["path", "whatToDo"],
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "File path in project structure"
                  },
                  "whatToDo": {
                    "type": "string",
                    "description": "Required changes in file",
                    "minLength": 20
                  }
                }
              },
              "minItems": 1
            },
            "conditionsForSolved": {
              "type": "string",
              "description": "Completion requirements",
              "minLength": 30
            }
          }
        }
      }
    }
    </schema_development>
</schemas>

<examples>
    <example_development>
    {
      "id": "ui-1-1",
      "title": "Create responsive navigation menu with mobile support",
      "description": "Implement a responsive navigation menu that transforms into a hamburger menu on mobile devices, with smooth transitions and proper accessibility support",
      "order": 6,
      "solved": false,
      "isLocked": false,
      "relevance": 9,
      "parentId": "ui-1",
      "mustBeCodedInCodeBase": true,
      "levelOfGranularity": 8,
      "isReachableByEntryLevelDevelopers": true,
      "readyForDevelopment": true,
      "indicationsForDevelopment": {
        "instructions": "1. Create NavMenu component with desktop and mobile layouts\n2. Implement hamburger button for mobile view\n3. Add smooth transition animation for menu toggle\n4. Ensure proper keyboard navigation support\n5. Add click-outside behavior to close mobile menu\n6. Implement proper focus management\n7. Add aria-labels and roles for accessibility",
        
        "suggestion": "Build the mobile menu using a Headless UI Menu component for accessibility features. Use CSS transforms for smooth animations rather than height/width transitions. Implement a custom hook for click-outside behavior. Use CSS Grid for desktop layout and fixed positioning for mobile menu overlay.",
        
        "filesRelated": [
          {
            "path": "src/components/navigation/NavMenu.tsx",
            "whatToDo": "Create main navigation component with responsive behavior and menu toggle logic"
          },
          {
            "path": "src/components/navigation/NavLink.tsx",
            "whatToDo": "Create styled navigation link component with active state handling"
          },
          {
            "path": "src/hooks/useClickOutside.ts",
            "whatToDo": "Implement hook for handling click-outside behavior"
          },
          {
            "path": "src/styles/navigation.css",
            "whatToDo": "Add styles for navigation, including transitions and responsive layouts"
          }
        ],
        
        "conditionsForSolved": "Desktop menu displays horizontally with proper spacing\nMobile menu toggles smoothly with hamburger button\nKeyboard navigation works in both desktop and mobile views\nClick outside mobile menu closes it\nAll interactive elements are properly labeled for accessibility\nTransitions are smooth with no layout jumps\nWorks correctly across different screen sizes"
      }
    }
    </example_development>
</examples>
</examples>